######################################################################
# Program 2                                                          #
# Reads a set of a paragraph of 6 sentences from a file into memory. #
# It prints the sentences on the console printer. It then asks the   #
# user for a word. It searches the paragraph to see if it contains   #
# the word. If so, it prints out the word, the sentence number, and  #
# the word number in the sentence.                                   #
######################################################################
# Stack data
#  Note: Base User Program, so Address of Program is in address 16
#   0 - Base Address of Program
#   1 - Address of First character in Heap Dataset -- first character in the paragraph
#   2 - Character length of the paragraph
#   3 - wordCursor - Cursor for iterating through the user-entered word
#   4 - Address of first loop (get word from user)
#   5 - Address of first character in the user-entered word
#   6 - paragraphCursor - Cursor for iterating through the paragraph
#   7 - sentenceNumber - Track the sentences searched within the paragraph
#   8 - wordNumber - Track the words searched within the current sentence
#   9 - characterNumber - Track the characters searched within the current word
#  10 - isMatch Boolean, initialized to TRUE
#  11 - Address of second loop (word search) for jumps
#  12 - Address of second loop (word search) +  32 for jumps
#  13 - Address of second loop (word search) +  64 for jumps
#  14 - Address of second loop (word search) +  96 for jumps
#  15 - Address of second loop (word search) + 128 for jumps
# Initialization
LDX 1,0,16;          0 - Load IX1 with the base address of the stack frame
LDX 2,0,18;          1 - Load IX2 with the base address of the dataset
LDA 0,2,1,1;         2 - Load R0 with the first usable word of the dataset (cursor)
STR 0,1,1;           3 - Store the first usable word of the dataset to local[1]
LDX 2,1,0;           4 - Load IX2 with the base address of the program
CHK 1,2;             5 - Store the length of the paragraph to local[2]
STR 1,1,2;           6
# Execute read-string
JSR 0,24,1;          7
# Check R0 for RC. If not 0, jump to error
LDX 1,0,16;          8 - Load IX1 with the base address of the stack frame
LDX 2,1,0;           9 - Load IX2 with the base address of the program
JNE 0,2,12;         10 - If RC > 0, Jump to error condition (TBD)                  !needs update
LDR 0,1,1;          11 - Load R0 with initial cursor position in local[1]
# Execute print-string
JSR 0,25,1;         12
######################################################################
# Get the word from the user                                         #
######################################################################
# Prompt the user for a word. Assumes c(28) = 32, c(29) = 64, c(30)=96.
LDX 1,0,28;         13
LDX 2,0,29;         14
LDX 3,0,30;         15
LDA 0,2,23;         16 - W
OUT 0,1;            17
LDA 0,3,15;         18 - o
OUT 0,1;            19
LDA 0,3,18;         20 - r
OUT 0,1;            21
LDA 0,3,4;          22 - d
OUT 0,1;            23
LDA 0,1,31;         24 - ?
OUT 0,1;            25
LDA 0,0,10;         26 - \n
OUT 0,1;            27
# Store the address of the user-entered word
LDX 1,0,16;         28 - Load IX1 with the base address of the stack frame
LDX 2,0,18;         29 - Load IX2 with the base address of the dataset
LDA 0,2,1,1;        30 - Load R0 with the first usable word of the dataset (cursor)
AMR 0,1,2;          31 - Add the length of the paragraph, local[2], to R0 - next free word in the heap
STR 0,1,5;          32 - Store the address of the user-entered word to local[5]
LDX 2,1,5;          33 - Load IX2 with the address for the user word, local[5]
LDR 0,0,16,1;       34 - Store the start address of the first loop (38) to local[4]
AIR 0,31;           35
AIR 0,7;            36
STR 0,1,4;          37
# START LOOP - Get user word
IN 0,0;             38 - Allow the user to type a word into the console keyboard
STR 0,2,0;          39 - Store the first character of the word at the cursor
STX 2,1,3;          40 - Increment user-word cursor
LDR 3,1,3;          41
AIR 3,1;            42
STR 3,1,3;          43
LDX 2,1,3;          44
CHK 0,0;            45 - Check the number of characters remaining in the input buffer
JNE 0,1,4,1;        46 - If R0 != 0, jump to start of loop (local[4])
## END LOOP - Get user word
LDA 0,0,28;         47 - Store ASCII 28 (FS) to mark the end of the word for print-string
STR 0,2,0;          48
######################################################################
# START WORD SEARCH  (wordsearch_base)                               #
######################################################################
# Loop initialization
LDR 0,0,16,1;       49 - Store the start address of the word search (49) to local[11] (wordsearch_base)
AIR 0,31;           50
AIR 0,18;           51
STR 0,1,11;         52
AIR 0,31;           53 - Store the local[11] + 32 to local[12]
AIR 0,1;            54
STR 0,1,12;         55
AIR 0,31;           56 - Store the local[11] + 64 to local[13]
AIR 0,1;            57
STR 0,1,13;         58
AIR 0,31;           59 - Store the local[11] + 96 to local[14]
AIR 0,1;            60
STR 0,1,14;         61
AIR 0,31;           62 - Store the local[11] + 128 to local[15]
AIR 0,1;            63
STR 0,1,15;         64
LDA 3,0,28;         65 - Load R3 with the character code of FS (our terminator)
LDR 0,1,1;          66 - Initialize paragraphCursor (local[6]) to the first word in the paragraph
STR 0,1,6;          67
LDR 0,1,5;          68 - Initialize wordCursor (local[3]) to the first word in the user-entered word
STR 0,1,3;          69
LDA 0,0,1;          70 - Initialize isMatch (local[10]) to TRUE (1)
STR 0,1,10;         71
LDA 0,0,1;          72 - Initialize sentenceNumber, local[7], to one
STR 0,1,7;          73
LDA 0,0,0;          74 - Initialize wordNumber, local[8], to zero
STR 0,1,8;          75
LDA 0,0,0;          76 - Initialize characterNumber, local[9], to zero
STR 0,1,9;          77
# LOOP_START - Word Search
LDR 0,1,6,1;        78 - Load R0 with the character at paragraphCursor
LDR 1,1,3,1;        79 - Load R1 with the character at wordCursor
#If R0 = FS && isMatch = FALSE, no match was found
TRR 0,3;            80 - Test R0 = R3 (FS)
LDX 3,1,12;         81 - Load IX3 with wordsearch_base+32
JCC 3,3,4;          82 - If R0 == FS, skip the next two instructions (skip to 85) to check isMatch
LDX 3,1,12;         83 - Load IX3 with wordsearch_base+32
JMA 3,7;            84 - If R0 != FS, jump to whitespace/punctuation check (88)
LDR 2,1,10;         85 - If isMatch == FALSE
LDX 3,1,15;         86 - Load IX3 with wordsearch_base+96
JZ 2,3,3;           87 - isMatch is False - No match found, jump to NO_MATCH (180)
# Whitespace/punctuation check
# If R0 = whitespace or punctuation (ASCII value < 65) continue. else, jump to isCharacter
LDR 2,0,29;         88 - Store 65 at temporary location 17
AIR 2,1;            89
STR 2,0,17;         90
SMR 0,0,17;         91 - Subtract 65 from R0.
LDX 3,1,12;         92 - Load IX3 with wordsearch_base+32
JCC 1,3,15;         93 - If underflow (negative number-- not a character), skip the next two instructions (jump to 96)
LDX 3,1,14;         94 - Load IX3 with wordsearch_base+96
JGE 0,3,18;         95 - If the value in R0 is >= 0, it's a character. Jump to isCharacter (163).
LDR 0,1,6,1;        96 - Reload R0 with the character at paragraphCursor
#    If character number (local_9) != 0 && isMatch == true
LDR 2,1,9;          97
LDX 3,1,13;         98 - Load IX3 with wordsearch_base+64
JZ 2,3,22;          99 - If local[9] == 0, jump to period check (135)
LDR 2,1,10;        100 - If isMatch == TRUE
LDX 3,1,13;        101 - Load IX3 with wordsearch_base+64
JZ 2,3,22;         102 - isMatch is False, jump to period check (135)
# isMatch is True, Match has been found. Print the required info and then TRAP 0.
#    Print the user-entered word
LDX 1,0,16;        103 - Load IX1 with the base address of the stack frame
LDR 0,1,5;         104 - Load R0 with base address of the user word, local[5]
#    Execute print-string
JSR 0,25,1;        105
#    Print sentenceNumber
LDX 2,0,28;        106 - IX2 = 32
LDX 3,0,29;        107 - IX3 = 64
LDX 1,0,16;        108 - Load IX1 with the base address of the stack frame
LDA 0,0,10;        109 - \n
OUT 0,1;           110
LDA 0,3,19;        111 - S
OUT 0,1;           112
LDA 0,2,26;        113 - :
OUT 0,1;           114
LDA 0,2,0;         115 - space
OUT 0,1;           116
LDA 0,1,7;         117 - print sentenceNumber (local[7])
JSR 0,27,1;        118 - print-int subroutine
LDA 0,0,10;        119 - \n
OUT 0,1;           120
#    Print wordNumber
LDX 2,0,28;        121 - IX2 = 32
LDX 3,0,29;        122 - IX3 = 64
LDX 1,0,16;        123 - Load IX1 with the base address of the stack frame
LDA 0,3,23;        124 - W
OUT 0,1;           125
LDA 0,2,26;        126 - :
OUT 0,1;           127
LDA 0,2,0;         128 - space
OUT 0,1;           129
LDA 0,1,8;         130 - print wordNumber (local[8])
JSR 0,27,1;        131 - print-int subroutine
LDA 0,0,10;        132 - \n
OUT 0,1;           133
TRAP 0;            134 - Exit program
#Else If R0 == '.' (period) - period check
LDX 1,0,28;        135 - Load R2 with '.' (period). c(28) = 32
LDA 2,1,14;        136
TRR 0,2;           137 - Test R0 = R2 ('.')
LDX 3,1,13;        138 - Load IX3 with wordsearch_base+64
JCC 3,3,29;        139 - If R0 ==  R2 (.) skip the next two instructions (skip to 142) and increment sentenceNumber
LDX 3,1,14;        140 - Load IX3 with wordsearch_base+64
JMA 3,4;           141 - R0 != R2 (.) do not increment sentenceNumber and do not reset word number, jump to wordNumber++ (149)
LDR 2,1,7;         142 - increment sentenceNumber (local[7])
AIR 2,1;           143
STR 2,1,7;         144
LDA 2,0,0;         145 - wordNumber (local[8]) = 0
STR 2,1,8;         146
LDX 3,1,14;        147 - Load IX3 with wordsearch_base+64
JMA 3,7;           148 - Do not increment wordNumber, skip to maintenance (152)
LDR 2,1,8;         149 - wordNumber++ (local[8])
AIR 2,1;           150
STR 2,1,8;         151
# maintenance
# reset word_cursor, characterNumber = 0, paragraph_cursor++
LDR 2,1,5;         152 - Reset wordCursor to the address of the first character in the user-entered word (local[5])
STR 2,1,3;         153
LDA 2,0,0;         154 - characterNumber = 0
STR 2,1,9;         155
LDR 2,1,6;         156 - paragraphCursor++
AIR 2,1;           157
STR 2,1,6;         158
LDA 2,0,1;         159 - isMatch = TRUE (reset isMatch)
STR 2,1,10;        160
LDX 3,1,11;        161 - Load IX3 with loop_base
JMA 3,29;          162 - Jump to loop_start (78)
## isCharacter -- R0 is a character
LDR 0,1,6,1;       163 - Reload R0 with the character at paragraphCursor
TRR 0,1;           164 - If R0 == R1, the character matches
LDX 3,1,14;        165 - Load IX3 with loop_start+96
JCC 3,3,24;        166 - R0==R1, Jump to COUNTER_INCREMENTS (169)
LDA 2,0,0;         167 - R0 != R1, set isMatch = FALSE
STR 2,1,10;        168
## COUNTER_INCREMENTS
LDR 2,1,3;         169 - wordCursor++ -- local[3]
AIR 2,1;           170
STR 2,1,3;         171
LDR 2,1,9;         172 - characterNumber++ -- local[9]
AIR 2,1;           173
STR 2,1,9;         174
LDR 2,1,6;         175 - paragraphCursor ++ -- local[6]
AIR 2,1;           176
STR 2,1,6;         177
LDX 3,1,11;        178 - Load IX3 with loop_base
JMA 3,29           179 - Jump to loop_start (78)
# END LOOP - Word Search
######################################################################
# END WORD SEARCH                                                    #
######################################################################
# NO_MATCH
# Assumes c(28) = 32, c(29) = 64, c(30)=96.
LDX 1,0,28;        180
LDX 2,0,29;        181
LDX 3,0,30;        182
LDA 0,2,14;        183 - N
OUT 0,1;           184
LDA 0,3,15;        185 - o
OUT 0,1;           186
LDA 0,1,0;         187 - [space]
OUT 0,1;           188
LDA 0,3,13;        189 - m
OUT 0,1;           190
LDA 0,3,1;         191 - a
OUT 0,1;           192
LDA 0,3,20;        193 - t
OUT 0,1;           194
LDA 0,3,3;         195 - c
OUT 0,1;           196
LDA 0,3,8;         197 - h
OUT 0,1;           198
LDA 0,1,1;         199 - !
OUT 0,1;           200
LDA 0,0,10;        201 - \n
OUT 0,1;           202
TRAP 0;            203