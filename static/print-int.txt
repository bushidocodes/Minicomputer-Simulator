JMA 3,18;       Jump past locals
;               1 - Return Address
;               2 - Digit 0 - 1698
;               3 - Digit 1 - 1699
;               4 - Digit 2 - 1700
;               5 - Digit 3
;               6 - Digit 4
;               7 - Digit 5
;               8 - Digit 6
;               9 - Digit 7
;               10 - Digit 8
;               11 - Digit 9
;               12 - Digit 10
;               13 - Digit 11
;               14 - Digit 12
;               15 - Digit 13
;               16 - Digit 14
;               17 - Digit 15 - 1713
STX 3,0,17;     IX2 = IX3 (Base Address)
LDX 2,0,17;
LDR 2,0,17;     IX3 += 32 (Base Address + 32)
AIR 2,31;
AIR 2,1;
STR 2,0,17;
LDX 3,0,17;
STR 0,0,17;     R0 = *R0, the number we want to ASCIIfy
LDX 1,0,17;
LDR 0,1,0;
STR 3,2,1;      local[1] = R3 (Return address)
LDA 3,2,17;     R3 = local[17], aka *char[CHAR_LEN-1]
LDR 2,0,31;     R2 = 10. Our Divisor
AIR 2,10;
DVD 0,2;        R0 / R2. => R0 is quotient. R1 is Remainder
AIR 1,31;       R1 += 48 to get ASCII Digit
AIR 1,17;
STR 3,0,17;     IDX1 = R3
LDX 1,0,17;
STR 1,1,0;      local[i] = ASCII char
SIR 3,1;        R3--
JNE 0,3,0;      if R0 (quotient) > 0 THEN Jump to base address + 32 (DVD).
LDR 3,0,31;     R3 = 16
AIR 3,16;
LDA 0,2,2;      R0 = @local[2], @char[0]
LDA 2,0,0;      R2 = NULL
STR 0,0,17;     do {
LDX 1,0,17;         IDX1 = R0, address of char[i]
LDR 1,1,0;          R1 = c(IDX1), value of char[i]
OUT 1,1;            print value of char[i]
STR 2,1,0;          char[i] = NULL
AIR 0,1;            R0++
SOB 3,3,11;     } while (--R3 > 0)
LDR 3,2,1;      R3 = local[1] (return address)
RFS 0;          Return from Subroutine with 0 error code