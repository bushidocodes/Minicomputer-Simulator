###############################################################
# A program to trigger all fault conditions on the system     #
# The system prints F#, where # is the ID of the fault number #
# and then it halts. You can continue the system onto the     #
# next fault by pressing RUN!                                 #
###############################################################
# Trigger Permission Fault by loading a protected address
LDR 0,0,0; Try to load address of trap table
# Now try to run TRAP 15, a trap that we explicitly didn't load
TRAP 15;
# Trigger an invalid OPCODE by directly inject a crappy word with 40, which isn't an OPCODE
1010000000000000;
# Trigger Memory out of bounds fault by accessing over 2048
# X1 = 127*127 = 16129
LDX 3,0,31;
LDA 0,3,31; Loading 127
LDA 2,3,31; Loading 127
MLT 0,2;
STR 1,0,17;
LDX 1,0,17;
# Now try to load this into R1
LDR 1,1,0;
# Now just run normal stuff like nothing happened. (⌐■_■)
LDX 1,0,28;
LDX 2,0,29;
LDX 3,0,30;
LDA 0,2,8;     ASCII 72 - H
OUT 0,1;
LDA 1,3,5;     ASCII 101 - e
OUT 1,1;
LDA 2,3,12;    ASCII 108 - l
OUT 2,1;
OUT 2,1;
LDA 3,3,15;    ASCII 111 - o
OUT 3,1;
LDA 0,1,0;     ASCII 32 - ' '
OUT 0,1;
LDA 1,2,23;    ASCII 87 - W
OUT 1,1;
LDA 0,3,15;     ASCII 111 - o
OUT 0,1;
LDA 0,3,18;     ASCII 114 - r
OUT 0,1;
LDA 0,3,12;     ASCII 108 - l
OUT 0,1;
LDA 0,3,4;      ASCII 100 - d
OUT 0,1;
LDA 0,0,10;     ASCII 10 - LF
OUT 0,1;
TRAP 0;