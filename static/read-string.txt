######################################################################################################################
# read-string: A subroutine to load a stream of characters terminated by ASCII 28 (File Separator) from the virtual  #
# card reader into a buffer started at the memory address stored at R0                                               #
# This does not protect against buffer overruns. If there is danger of this, the caller should use CHK to ensure the #
# buffer is large enough before calling this.
# It writes the Return Code to R0 and the resulting unsigned integer to R1 on success                                #
######################################################################################################################
# Usage of Stack
#  0 - Base Address of Program
#  1 - Return Address
###############################################################
# Initialization                                              #
###############################################################
# Load IX1 with the base address of the stack frame
LDX 1,0,16;          0 - Load IX1 with the base address of the stack frame
LDX 2,1,0;           1 - Load IX2 with the base address of the program
# R0 is already ready for use, containing the base address of our buffer
# R3 contains our return address, and we don't change it, so no need to save it
CHK 1,2;             2 - Check the Card reader and store the total number of chars in R1
JNE 1,2,5;           3 - if R1 != 0, jump to start of loop  (5)
RFS 1;               4
###############################################################
# Start of Loop - Read Input Buffer into Memory               #
###############################################################
# Copy R0 cursor to IX3 so it can be used
STR 0,0,17;          5
LDX 3,0,17;          6
# Load a character from the virtual card punch into R2
IN 2,2;              7
# Write character from R2 to the address contained in IX3 (the cursor)
STR 2,3,0;           8
# Increment R0 cursor by 1
AIR 0,1;             9
# Get the number of remaining characters in the input buffer and loop if > 0
CHK 1,2;            10
JNE 1,2,5;          11 - If R1 != 0, jump to start of loop (5)
###############################################################
# End of Loop - Read Input Buffer into Memory                 #
###############################################################
RFS 0;              12