######################################################################
# Program 1                                                          #
# A program that reads 20 numbers (integers) from the keyboard,      #
# prints the numbers to the console printer, requests a number from  #
# the user, and searches the 20 numbers read in for the number       #
# closest to the number entered by the user. Print the number        #
# entered by the user and the number closest to that number. Your    #
# numbers should not be 1…10, but distributed over the range of      #
# 0 … 65,535. Therefore, as you read a character in, you need to     #
# check it is a digit, convert it to a number, and assemble the      #
# integer.                                                           #
######################################################################
# Stack data
#  Note: Base User Program, so Address of Program is in address 16
#   0 - Base Address of Program
#   1 - base+32 - for addressing instructions 31-63
#   2 - base+64 - for addressing instructions 63-95
#   3 - base+96 - for addressing instructions 96-127
#   4 - base+128 - for addressing instructions 128-159
#   5 - dataLoc - Cursor that points to the current number in the user inputted list of 20 numbers (0..65535) in memory (ARR)
#   6 - loop_counter - Counter for iterating through the loop, initialized to 20.
#   7 - loop_1_start - Start address of loop 1
#   8 - loop_2_start - Start address of loop 2
#   9 - closestDistance - Holds the shortest found distance so far. Initialized to 65535.
#  10 - userNum - The user inputted number that will be compared to the list.
#  11 - currentNumDistance - Holds the distance from the user inputted number to the list number being currently checked
#  12 - closestNumValue - The closest number found so far in the search
#  13 - firstLoopFlag - initialized to 0
# Initialization
LDX 1,0,16;          0 - Load IX1 with the base address of the stack frame
LDX 2,0,18;          1 - Load IX2 with the base address of the dataset
LDR 0,1,0;           2 - Load R0 with the base address of the program
AIR 0,31;            3 - Store base+32 to local[1]
AIR 0,1;             4
STR 0,1,1;           5
AIR 0,31;            6 - Store base+64 to local[2]
AIR 0,1;             7
STR 0,1,2;           8
AIR 0,31;            9 - Store base+96 to local[3]
AIR 0,1;            10
STR 0,1,3;          11
AIR 0,31;           12 - Store base+128 to local[4]
AIR 0,1;            13
STR 0,1,4;          14
LDA 0,2,1,1;        15 - Store first usable word of the dataset (dataLoc) to local[5]
STR 0,1,5;          16
LDA 2,0,20;         17 - Initialize loop_counter to 20 at local[6]
STR 2,1,6;          18
LDR 0,0,16,1;       19 - Store loop_1_start (31) to local[7]
AIR 0,30;           20
AIR 0,1;            21
STR 0,1,7;          22
LDR 0,1,2;          23 - Store loop_2_start (66) to local[8]
AIR 0,1;            24
AIR 0,1;            25
STR 0,1,8;          26
# initialize CLOSEST_DISTANCE variable to max value (65535) and store at local[9]
LDA 0,0,1;          27
SRC 1,15,1,0;       28 - Lsh R1 by 15 bits to get 1000 0100 0000 0000
SRC 1,15,0,0;       29 - Rsh R1 arithmetically 15 bits to get 1111 1111 1111 1111 (max value)
STR 1,1,9;          30 - Store at local[9]
#########################################
# LOOP 1 - Get 20 numbers from the user #
#########################################
STR 2,1,6;          31 - Store loop_counter at local[6]
# Read a number from the User. Return code goes to R0. Resulting number goes to R1.
JSR 0,26,1;         32 - read-int subroutine
LDX 1,0,16;         33 - Reload the base address of the stack frame
# Check R0 for return code. If not 0, then error
LDX 2,1,1;          34 - LDX for jump
JZ 0,2,5;           35 - skip the next instruction. jump to (37)
TRAP 1;             36 - read-int failed
# Otherwise success, so write R1 to dataLoc cursor location (local[5] indirect)
STR 1,1,5,1;        37 - write R1 to dataLoc cursor indirect
LDA 0,1,5,1;        38 - Load this address into R0 to use as an arg to print-int subroutine
JSR 0,27,1;         39 - print-int subroutine
LDX 1,0,16;         40 - Reload the base address of the stack frame
LDA 0,0,10;         41 - print \n
OUT 0,1;            42
LDR 0,1,5;          43 - increment dataLoc (local[5])
AIR 0,1;            44
STR 0,1,5;          45
LDR 2,1,6;          46 - Load loop_counter (local[6])
SOB 2,1,7,1;        47 - Subtract 1 from loop_counter and branch to LOOP 1 (local[7] indirect)
#########################################
# END LOOP 1                            #
#########################################
# Get one additional number             #
#########################################
# Prompt the user.
LDX 2,0,29;         48 - N
LDA 0,2,14;         49
OUT 0,1;            50
LDX 2,0,28;         51 - ?
LDA 0,2,31;         52
OUT 0,1;            53
LDA 0,2,0;          54 - [space]
OUT 0,1;            55
# Read a number from the User. Return code goes to R0. Resulting number goes to R1.
JSR 0,26,1;         56 - read-int subroutine
LDX 1,0,16;         57 - Reload the base address of the stack frame
# Check R0 for return code. If not 0, then error
LDX 2,1,1;          58 - LDX for jump
JZ 0,2,29;          59 - skip the next instruction. jump to (61)
TRAP 1;             60 - read-int failed
# Otherwise success, so write userNum to local[10]
STR 1,1,10;         61 - write R1 to local[10]
#########################################
# Preparation for loop 2                #
#########################################
LDA 2,0,20;         62 - Load R2 with 20 to reset loop COUNTER variable.
LDR 3,1,5;          63 - reset dataLoc cursor (local[5]) back to the beginning of the array by subtracting 20
SIR 3,20;           64
STR 3,1,5;          65
#########################################
# LOOP 2 - Search the list              #
#########################################
LDR 0,1,10;         66 - Load R0 with userNum (local[10])
SMR 0,1,5,1;        67 - subtract the current number at the cursor (local[5] indirect) from userNum (R0)
LDX 3,1,2;          68
JCC 1,3,8;          69 - if underflow is set (difference is less than 0), jump to GREATER_THAN (72).
LDX 3,1,2;          70
JMA 3,13;           71 - otherwise (diff >= 0) jump to LESS_THAN (77)
# GREATER_THAN
# Difference between the two numbers is less than zero.
LDR 1,1,5,1;        72 - Load R1 with the number from the list (local[5] indirect)
SMR 1,1,10;         73 - subtract userNum (local[10]) from R1-- distance between numbers is in R1 now
STR 1,1,11;         74 - store the distance (R1) to currentNumDistance (local[11])
LDX 3,1,2;          75
JMA 3,23;           76 - jump to CHECK_DISTANCE (87)
# LESS_THAN
# Difference between the two numbers is greater than or equal to zero.
LDX 3,1,2;          77
JZ 0,3,18;          78 - If the value in R0 is zero, jump to ZERO (82)
# Otherwise, the difference is in R0 currently.
STR 0,1,11;         79 - Store the currentNumDistance to local[11]
LDX 3,1,2;          80
JMA 3,23;           81 - jump to CHECK_DISTANCE (87)
# ZERO
# Difference between the two numbers is exactly zero-- they are the same number.
STR 0,0,21;         82 - Store the distance (R0) to currentNumDistance (local[11])
LDR 0,1,5,1;        83 - User number is the same as current number. Load the number into R0 from local[5] indirect
STR 0,1,12;         84 - store the current number in closestNumValue (local[12])
LDX 3,1,3;          85
JMA 3,10;           86 - Number has been found. Jump to END LOOP 2 (106)
# CHECK_DISTANCE
# Check to see if the current number is closer than the closest known number.
LDR 0,1,13;         87 - load firstLoopFlag into R0 from local[13]
LDX 3,1,2;          88
JZ 0,3,30;          89 - if this is the first loop, jump to NEW_CLOSEST (94)
LDR 0,1,9;          90 - load closestDistance (local[9]) into R0
SMR 0,1,11;         91 - subtract the currentNumDistance (local[11]) from the closestDistance (R0)
LDX 3,1,3;          92
JCC 1,3,5;          93 - if underflow is set the number is not closer, jump to LOOP MAINTENANCE (101).
# NEW_CLOSEST
# Set the current number as the new closest number.
LDR 0,1,13;         94 - firstLoopFlag++  (local[13])
AIR 0,1;            95
STR 0,1,13;         96
LDR 0,1,11;         97 - reload currentNumDistance (local[11]) into R0 -- fixes an issue on the first iteration
STR 0,1,9;          98 - the currentNumDistance is closer than closestDistance, so replace it in local[9]
LDR 1,1,5,1;        99 - load the current number at dataLoc (local[5] indirect) in R1
STR 1,1,12;        100 - store current number into closestNumValue local[12]
# LOOP MAINTENANCE
# Increment counters.
LDR 3,1,5;         101 - dataLoc++  (local[5])
AIR 3,1;           102
STR 3,1,5;         103
LDX 3,1,8;         104
SOB 2,3,0;         105 - subtract 1 from R2 (COUNTER). if c(R2) > 0, set PC to loop 2 start (local[8])
#####################################################
# END LOOP 2                                        #
#####################################################
LDA 0,1,10;        106 - R0 = pointer to userNum (local[10]). Used as arg to PRINTINT
JSR 0,27,1;        107 - print-int subroutine
LDX 1,0,16;        108 - Reload the base address of the stack frame
LDA 0,0,10;        109 - \n
OUT 0,1;           110
LDX 2,0,29;        111 - S
LDA 0,2,19;        112
OUT 0,1;           113
LDX 2,0,28;        114
LDA 0,2,26;        115 - :
OUT 0,1;           116
LDA 0,2,0;         117 - [space]
OUT 0,1;           118
LDA 0,1,12;        119 - R0 = closestNumValue (local[12]). Used as arg to PRINTINT
JSR 0,27,1;        120 - print-int subroutine
LDX 1,0,16;        121 - Reload the base address of the stack frame
LDA 0,0,10;        122 - \n
OUT 0,1;           123
TRAP 0;            124 - end of program